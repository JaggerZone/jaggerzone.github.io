[{"title":"Vim学习","url":"/2980e34d.html","content":"\n# Vim\n\n## Lession 1.1 \n\n通过`h`、`j`、`k`、`l`移动光标位置\n\n其中：\n\n- `h`为左移\n\n- `l`为右移\n\n- `j`为下移\n\n- `k`为上移\n\n## Lession 1.2\n\n启动vim编辑器\n\n```shell\nvim FILENAME\n```\n\n\n\n强制退出vim编辑器\n\n```vim\n:q!  # quit但不保存\n```\n\n**注：此项操作不会对编辑内容进行保存**\n\n## Lession 1.3\n\n使用`x`键可删除光标选中的字符\n\n## Lession 1.4\n\n使用`i`键可以进行插入文本模式(INSERT)\n\n使用`esc`键退回到正常模式(NORMAL)\n\n## Lession 1.5\n\n使用`a`键可以进行追加文本模式(INSERT)\n\n使用`esc`键退回到正常模式(NORMAL)\n\n**注：`a`与`i`的区别是，按下`i`时，是在光标处插入文本；按下`a`时，是在光标的后一个字符追加文本**\n\n## Lession 1.6\n\n使用`w`(write)+`q`(quit)可对文件保存并退出\n\n```vim\n:wq # write + quit\n```\n\n\n\n\n\n## Lession 2.1\n\n将光标移至单词**头部**，键入`d`+`w`删除整个单词\n\n```vim\ndw #DELETE WORD\n```\n\n## Lession 2.2\n\n键入`d`+`$`可以删除从**光标**到**行尾**的字符\n\n```vim\nd$ #DELETE $(行内剩余字符)\n```\n\n## Lession 2.3\n\n在`d`后面可以添加如下字字符\n\n```shell\ndw # 删除光标至下一个单词头(包含空格)\nde # 删除光标至本单词尾(不包含空格)\nd$ # 删除光标至行尾\nd0 # 删除行首至光标(包含空格)\nd^ # 删除行首至光标(不包含空格)\ndG # 删除光标至文本末尾\ndgg # 删除文本首至光标\n```\n\n## Lession 2.4\n\n键入`w`使光标移动到下一个单词首，键入`[数字]`+`w`使光标移动到后[数字]个单词首。如：键入`2w`将光标移动至后两个单词首\n\n```vim\n2w # move 2 WORD\n```\n\n键入`e`使光标移动到下一个单词尾(包括光标所在单词)，键入`[数字]`+`e`使光标移动到后[数字]个单词尾。如：键入`3e`将光标移动至后三个单词尾\n\n```vim\n3e # move 3 WORD(至尾部)\n```\n\n## Lession 2.5\n\n键入`d`+`[数字]`+`w`可以连续删除[数字]个单词\n\n```vim\nd2w # DELETE 2 WORD\n```\n\n## Lession 2.6\n\n键入`[数字]`+`dd`可以删除[数字]行\n\n```vim\n2dd # DELETE 2 LINE\n```\n\n## Lession 2.7\n\n键入`u`以撤销最后的命令，键入`U`以修复一整行\n\n```vim\nu # UNDO\nU # UNDO LINE\n```\n\n"},{"title":"bandit闯关攻略","url":"/d76b0418.html","content":"\n# bandit\n\n```shell\nssh bandit0@bandit.labs.overthewire.org -p 2220\npasswd:bandit0\n```\n\n# bandit0\n\n```shell\nls\ncat readme\npasswd:NH2SXQwcBdpmTEzi3bvBHMM9H66vVXjL\n```\n\n# bandit1\n\n```shell\nls\ncat ./-\npasswd:rRGizSaX8Mk1RTb1CNQoXTcYZWU6lgzi\n```\n\n# bandit2\n\n```shell\nls\ncat spaces\\ in\\ this\\ filename\npasswd:aBZ0W5EmUfAf7kHTQeOwd8bauFJ2lAiG\n```\n\n# bandit3\n\n```shell\nls\ncd inhere/\nls\nls -a\ncat .hidden\npasswd:2EW7BBsr6aMMoJ2HjW067dm8EgX26xNe\n```\n\n# bandit4\n\n```shell\nls\ncd inhere/\nls\nfile ./*\ncat ./-file07\npasswd:lrIWWI6bB37kxfiCQZqUdOIYfr6eEeqR\n```\n\n# bandit5\n\n```shell\nls\ncd inhere/\nfind -size 1033c\ncat maybehere07/.file2\npasswd:P4L4vucdmLnm8I7Vl7jG1ApGSfjYKqJU\n```\n\n# bandit6\n\n```shell\nls\nfind / -user bandit7 -group bandit6 -size 33c\ncat /var/lib/dpkg/info/bandit7.password\npasswd:z7WtoNQU2XfjmMtWA8u5rN4vzqu4v99S\n```\n\n# bandit7\n\n```shell\nls\ncat data.txt\n^C\ncat data.txt | grep millionth\npasswd:TESKZC0XvTetK0S9xNwm25STk5iWrBvP\n```\n\n# bandit8\n\n```shell\nls\ncat data.txt\nsort data.txt | uniq -u\npasswd:EN632PlfYiZbn3PhVK3XOGSlNInNE00t\n```\n\n**PS:`sort`是对文档内容进行排序，`uniq`是进行去重，`-u`是仅保留唯一行，但是需要注意的是，`uniq`需要与`sort`一起使用，因为`uniq`只是对相邻行相同的情况去重**\n\n# bandit9\n\n```shell\nls\ncat data.txt\nstrings data.txt\npasswd:G7w8LIi6J3kTb8A7j9LgrywtEUlyyp6s\n```\n\n**PS:strings将会逐行输出可识别的字符串，在遇到null或者乱码或者换行符时就会自动换行**\n\n# bandit10\n\n```shell\nls\ncat data.txt\nbase64 -d data.txt\npasswd:6zPeziLdR2RKNdNYFNb6nVCKzphlXHBM\n```\n\n# bandit11\n\n```shell\nls\ncat data.txt\ncat data.txt | tr 'a-zA-Z' 'n-za-mN-ZA-M'\npasswd:JVNBBFSmZwKKOP0XbFXOoW8chDz5yVRv\n```\n\n**PS:`tr`是进行字符串转换，题中的`tr`是将大小写的a-z转换为n-za-m的顺序，其实就是将后13位英文字母与前13位英文字母替换位置**\n\n\n\n# bandit12\n\n```shell\nls\ncat data.txt\nfile data.txt\ncd /tmp/bandit12\ncp ~/data.txt data\nfile data\nxxd -r data data.out\nfile data.out\nmv data.out data.gz\ngzip -d data.gz\nfile data\nmv data data.bz2\nbzip2 -d data.bz2\nfile data\nmv data data.gz\ngzip -d data.gz\nfile data\nmv data data.tar\ntar -xvf data.tar\nfile data5.bin\nmv data5.bin data.tar\ntar -xvf data.tar\nmv data6.bin data.tar\ntar -xvf data.tar\nfile data8.bin\nmv data8.bin data.gz\ngzip -d data.gz\nls\nfile data\ncat data\npasswd:wbWdlBxEir4CaE8LaPhauuOo6pwRmrDw\n```\n\n# bandit13\n\n```shell\nls\ncat sshkey.private\nssh bandit14@localhost -i sshkey.private -p 2220\n```\n\n# bandit14\n\n寻找bandit14的密码\n\n```shell\ncd /etc/bandit_pass\ncat bandit14\npasswd:fGrHPx402xGC7U7rXKDaxiWFTOiF0ENq\n```\n\n使用`nc`命令发送密码给localhost，端口号为30000\n\n```shell\nnc localhost 30000\nfGrHPx402xGC7U7rXKDaxiWFTOiF0ENq\npasswd:jN2kgmIXJ6fShzhT2avhotn4Zcka6tnt\n```\n\n**PS:`nc`命令（又叫`ncat`）可以理解为网络上的`cat`命令，即可以实现网络上的读、写以及重定向数据，还可以进行远程连接、拷贝文件等功能**\n\n# bandit15\n\n```shell\nopenssl s_client -connect localhost:30001 -ign_eof\njN2kgmIXJ6fShzhT2avhotn4Zcka6tnt\npasswd:JQttfApK4SeyHwDlI9SXGR50qclOAil1\n```\n\n# bandit16\n\n```shell\n#扫描localhost31000-32000端口中开启的端口\nnmap localhost -p 31000-32000\n#对开启的端口输入任意字符，排除返回相同字符的端口\nnc localhost 31046 | echo \"Hello World\"\nnc localhost 31518 | echo \"Hello World\"\nnc localhost 31691 | echo \"Hello World\"\nnc localhost 31790 | echo \"Hello World\"\nnc localhost 31960 | echo \"Hello World\"\n#尝试连接31518端口，发现返回失败\nopenssl s_client -connect localhost:31518 -ign_eof\nJQttfApK4SeyHwDlI9SXGR50qclOAil1\n#尝试连接31790端口，返回私钥\nopenssl s_client -connect localhost:31790 -ign_eof\nJQttfApK4SeyHwDlI9SXGR50qclOAil1\n#在tmp文件夹内创建新文件夹\nmkdir /tmp/zgx\n#创建ssh。private文件\nvim ssh.private\n-----BEGIN RSA PRIVATE KEY-----\nMIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ\nimZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ\nJa6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu\nDSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW\nJGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX\nx0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD\nKHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl\nJ9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd\nd8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC\nYNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A\nvLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama\n+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT\n8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx\nSatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd\nHCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt\nSghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A\nR57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi\nTtiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg\nR8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu\nL8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni\nblh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU\nYOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM\n77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b\ndxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3\nvBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=\n-----END RSA PRIVATE KEY-----\n#使用ssh.private文件登录bandit17\nssh bandit17@localhost -i /tmp/zgx/ssh.private -p 2220\n```\n\n# bandit17\n\n```shell\ncat /etc/bandit_pass/bandit17\nbandit17 passwd:VwOSWtCA7lRKkTfbr2IDh6awj9RNZM5e\n```\n\n```shell\nls\ndiff passwords.new passwords.old\npasswd:hga5tuuCLF6fFzUpnagiMN8ssu9LFrdg\n```\n\n# bandit18\n\n```shell\nssh bandit18@bandit.labs.overthewire.org -p 2220 \"cat ./readme\"\npasswd:awhqfNnAbc1naukrpqDYcF95h7HoMTrC\n```\n\n# bandit19\n\n```shell\nll\n./bandit20-do cat /etc/bandit_pass/bandit20\npasswd:VxCazJaVykI6W36BkBU0mJTCM8rR95XT\n```\n\n# bandit20\n\n```shell\necho \"VxCazJaVykI6W36BkBU0mJTCM8rR95XT\" | nc -l -p 30888 &\n./ suconnect 30888\npasswd:NvEJF7oVjkddltPSrdKEFOllh9V1IBcq\n```\n\n# bandit21\n\n```shell\ncat /etc/cron.d\nfile *\ncat cronjob_bandit22\ncat /usr/bin/cronjob_bandit22.sh\ncat /tmp/t7O6lds9S0RqQh9aMcz6ShpAoZKF7fgv\npasswd:WdDozAdTM2z9DiFEQ2mGlwngMfj4EZff\n```\n\n# bandit22\n\n```shell\ncd /etc/cron.d\ncat cronjob_bandit23\ncat /usr/bin/cronjob_bandit23.sh\necho I am user bandit23 | md5sum | cut -d ' ' -f 1\necho \"Copying passwordfile /etc/bandit_pass/bandit23 to /tmp/8ca319486bfbbc3663ea0fbe81326349\"\ncat /tmp/8ca319486bfbbc3663ea0fbe81326349\npasswd:QYw0Y2aiA672PsMmh9puTQuhoz8SyR2G\n```\n\n# bandit23\n\n```shell\ncd /etc/cron.d\nls\ncat cronjob_bandit24\ncat /usr/bin/cronjob_bandit24.sh\ncd /tmp\nmkdir zgx\nchmod 777 zgx\ncd zgx\nvim getpass\ncat /etc/bandit_pass/bandit24 > /tmp/zgx/bandit24pass\nchmod 777 getpass\ncp getpass /var/spool/bandit24/foo\n#等待一段时间\nls\ncat bandit24pass\npasswd:VAfGXJ1PBSsPSnvsjI8p759leLZ9GGar\n```\n\n# bandit24\n\n```shell\nnc localhost 30002\nVAfGXJ1PBSsPSnvsjI8p759leLZ9GGar 1234\n#Wrong!\ncd /tmp/zgx\nvim getpasswd.sh\n#!/bin/bash\npasswd=\"VAfGXJ1PBSsPSnvsjI8p759leLZ9GGar\"\nfor i in {0000..4999}\ndo\n        echo $passwd' '$i\ndone | nc localhost 30002\n./getpasswd.sh\nvim getpasswd.sh\n#!/bin/bash\npasswd=\"VAfGXJ1PBSsPSnvsjI8p759leLZ9GGar\"\nfor i in {0000..4999}\ndo\n        echo $passwd' '$i\ndone | nc localhost 30002\n./getpasswd.sh\npasswd:p7TaowMYrmu23Ol8hiZh9UvD0O9hpx8d\n```\n\n# bandit25\n\n```shell\nls\nssh -i bandit26.sshkey bandit26@localhost -p 2220\ncat /etc/passwd | grep bandit26\ncat /usr/bin/showtext\n#将终端窗口缩小\nssh -i bandit26.sshkey bandit26@localhost -p 2220\nv\n:e /etc/bandit_pass/bandit26\npasswd:c7GvcKlw9mC7aUQaPx7nwFstuAIBw1o1\n```\n\n# bandit26\n\n```shell\n#登录后发现登录不上，使用bandit25的老方法，缩小终端界面\nv\n:set shell=/bin/sh\n:sh\nls\n./bandit27-do cat /etc/bandit_pass/bandit27\npasswd:YnQpBuifNMas1hcUFk70ZmqkhUU2EuaS\n```\n\n# bandit27\n\n```shell\ncd /tmp\ngit clone ssh://bandit27-git@localhost/home/bandit27-git/repo\ncd repo\nls\ncd repo\nls\ncat README\npasswd:AVanL161y9rsbcJIsFHuw35rjaOM19nR\n```\n\n# bandit28\n\n```shell\ncd /tmp\nmkdir bandit28\ncd bandit28\ngit clone ssh://bandit28-git@localhost/home/bandit28-git/repo\nls\ncat README.md\ngit show\npasswd:tQKvmcwNYcFS6vmPHIUSI3ShmsrQZK8S\n```\n\n# bandit29\n\n```shell\ncd /tmp/zgx\ngit ssh://bandit29-git@localhost:2220/home/b\nandit29-git/repo\nls\ncd repo\nls\ncat README.md\ngit show\ngit branch -a\ngit checkout HEAD\nls\ncat README.md\ngit checkout dev\nls\ncat README.md\npasswd:xbhV3HpNGlTIdnjUrdAlPzc2L6y9EOnS\n```\n\n# bandit30\n\n```shell\ncd /tmp\nmkdir zgx30\ncd zgx30\ngit clone ssh://bandit30-git@localhost:2220/home\n/bandit30-git/repo\nls\ncd repo\nls\ncat README.md\ngit show\ngit branch -a\ngit checkout HEAD\nls\ncat README.md\ngit checkout master\nls\ncat README.md\ngit show-ref\ngit show 831a\npasswd:OoffzGDlzhAlerFJ2cAiz1D41JW1Mhmt\n```\n\n# bandit31\n\n```shell\ncd /tmp\nmkdir zgx31\ncd zgx31\ngit clone ssh://bandit31-git@localhost:2220/home\n/bandit31-git/repo\nls\ncd repo\nls\ncat README.md\necho 'May I come in?' >> key.txt\ngit add -f key.txt\ngit status\ngit commit -m 'key.txt'\ngit push origin master\npasswd:rmCBvG56y58BXzv98yZGdO7ATVL5dW8y\n```\n\n# bandit32\n\n```shell\n$0\ncat /etc/bandit_pass/bandit33\npasswd:odHo63fHiFqcWWJG9rLiLDtPm45KzUKy\n```\n\n完结撒花！！！！！！！！！\n"},{"title":"docker学习","url":"/7fb3659b.html","content":"\n# docker\n\n## 简介\n\n### 定义\t\n\n​\tdocker是一种支持windows/linux/mac系统的容器，可以把它理解为一个轻量级的虚拟机，也可以理解为手机中的小程序，用完即丢。它是一个应用打包、分发、部署的工具。具体的介绍可以查看[Docker快速入门](https://docker.easydoc.net/doc/81170005/cCewZWoN/lTKfePfP)。\n\n### 特性\n\n​\t一、docker支持各类windows和Linux系统\n\n​\t二、性能好，仅安装软件所需要的环境，最大化的减少无用配置\n\n​\t三、一条命令即可部署所需环境\n\n​\t四、稳定性强\n\n## docker常用命令\n\n```shell\n#查看正在运行的容器\ndocker ps\n#查看镜像列表\ndocker images\n#删除指定id的容器\ndocker rm container-id\n#启动/停止指定id的容器\ndocker start/stop container-id\n#删除指定id的镜像\ndocker rmi image-id\n#查看volume列表\ndocker volume ls\n#查看网络列表\ndocker network ls\n```\n\n```shell\n#build镜像,'-t'设置镜像名字和版本号\ndocker build -t test:v1\n#从镜像仓库拉取或更新指定镜像\ndocker pull\n#生成\n#'-it'以交互的方式运行\n#'-p'映射容器内端口到宿主机\n#'-v'挂载指定的文件夹\n#'--name'容器名字\n#'--hostname'主机名\n#'-d'后台运行\ndocker run -it -p 8080:8080 -v ~/test:/test --name test-hello --hostname test:v1 \n#交互式运行\ndocker exec -it hexo /bin/bash\n```\n\n### docker run\n\n**创建一个新的容器并运行一条命令**\n\n```shell\ndocker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n```\n\nOPTIONS:\n\n- -d: 后台运行容器，并返回容器ID\n- -i: 以交互模式运行容器，通常与-t使用\n- -t: 为容器重新分配一个伪输入终端，通常与-i使用\n- -p: 指定端口映射，格式为`主机（宿主机）端口:容器端口`\n- --name: 为容器命名\n- -h(--hostname): 指定容器的hostname\n- --link: 添加链接到另一个容器\n- -v(--volume): 绑定一个卷\n\n### docker exec\n\n**在运行的容器中执行命令**\n\n```shell\ndocker exec [OPTIONS] CONTAINER COMMAND [ARG..]\n```\n\nOPTIONS:\n\n- -d: 在后台运行\n- -i: 以交互模式运行\n- -t: 分配一个伪终端\n\nCONTAINER:\n\n​\t既可以是容器名，也可以是容器ID\n\n### 实战\n\n我们以docker安装mysql为例\n\n```shell\n#拉取MySQL最新版镜像\ndocker pull mysql:latest\n#创建MySQL容器\ndocker run -d --name some-mysql -p 33306:3306 -e MYSQL_ROOT_PASSWORD=980518 mysql\n#打开mysql容器\ndocker exec -it some-mysql /bin/bash\n#进入MySQL\nmysql -p\n#输入密码\n```\n\n\n\n## 发布和部署\n\n### 创建镜像\n\n一共有这几种方法可以创建镜像\n\n#### docker commit  \n\ndocker commit基于一个已存在的容器构建出的镜像\n\n```shell\n#查看正在运行的docker containers\ndocker ps\n#通过containers的ID或者NAME构建docker镜像\ndocker commit [ID]/[NAME] [image_name]/[tag]\n#检查image是否创建完成\ndocker images [image_name]/[tag]\n```\n\n#### Dockerfile + docker build\n\n#### docker save + docker load\n\n```shell\n#在A机器上打包\ndocker save [containers] | gzip > [image_name].tar.gz\n#在B机器上解压\ndocker load -i [image_name].tar.gz\n```\n\n#### docker export/docker import\n\n```shell\n#在A机器上打包\ndocker export [containers] | gzip > [image_name].tar.gz\n#在B机器上解压\ndocker import -i [image_name].tar.gz\n```\n\n**PS:使用第二种和第三种会丢失所有镜像的构建历史，不建议使用**\n\n### 上传镜像\n\n[注册账号](https://hub.docker.com/)\n\n创建镜像库\n\n![image-20240606163032438](docker-study/image-20240606163032438.png)\n\n在命令行登录账号\n\n```shell\ndocker login -u username\n#输入密码\n```\n\n新建一个tag用来装image\n\n```shell\ndocker tag [image_name]/[tag] username/[tag_name]/[tag]\n```\n\n\n\n将创建的镜像推送至docker hub\n\n```shell\ndocker push username/[tag_name]/[tag]\n```\n\n### 部署镜像\n\n```shell\ndocker run -dp 8080:8080 username/[tag_name]/[tag]\n```\n\n"},{"title":"为HEXO添加背景音乐","url":"/ff392be1.html","content":"\n看完这篇文章就知道怎么加背景音乐啦~\n\n## 安装hexo-tag-aplayer\n\n### 安装插件\n\n``` bash\n$ npm install --save hexo-tag-aplayer\n```\n\n## 修改配置文件\n\n### 修改_config.yml\n\n``` yaml\naplayer:\n  enable: true\n  asset_inject: false\n```\n\n### 修改Butterfly主题配置文件\n\n``` yaml\naplayerInject:\n  enable: true # 开启音乐播放器\n  per_page: true #每个页面都有Aplayer\n```\n\n``` yaml\ninject:\n  head:\n    # - <link rel=\"stylesheet\" href=\"/xxx.css\">\n  bottom:\n    - '<div class=\"aplayer no-destroy\" data-id=\"1900191778\" data-server=\"netease\" data-type=\"song\" data-fixed=\"true\" data-autoplay=\"true\" data-mutex=\"false\" > </div>'\n```\n"},{"title":"安装Hexo","url":"/aec52b30.html","content":"\n# 安装基础环境\n\n### 使用docker拉取基础镜像\n\n```shell\n#拉取ubuntu24.04的镜像\ndocker pull ubuntu:24.04\n#用docker生成hexo\ndocker run -it --name hexo --hostname hexo -v ~/hexo:/hexo -p 4000:4000 ubuntu:24.04 /bin/bash\n#交互式运行hexo\ndocker exec -it hexo /bin/bash\n```\n\n### 安装基础环境\n\n```shell\n#备份sources.list文件\ncp /etc/apt/sources.list /etc/apt/sources.list.bak\n#跳过交互式设置时区\nexport DEBIAN_FRONTEND=noninteractive\napt update && apt -y install ca-certificates vim tzdata\nln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\ndpkg-reconfigure -f noninteractive tzdata\n\n#更换镜像源\ncat > /etc/apt/sources.list << EOF \ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble main restricted universe multiverse\n\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble-updates main restricted universe multiverse\n\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ noble-backports main restricted universe multiverse\n\n# 以下安全更新软件源包含了官方源与镜像站配置，如有需要可自行修改注释切换\ndeb http://security.ubuntu.com/ubuntu/ noble-security main restricted universe multiverse\n\nEOF\n\n#安装git、npm\napt update && apt -y install git npm\n```\n\n### 安装hexo\n\n```shell\ncd hexo\nnpm install hexo-cli -g\nhexo init blog\ncd blog\nnpm install\nhexo server\n```\n\n```shell\nroot@hexo:/hexo/blog# git -v\ngit version 2.43.0\nroot@hexo:/hexo/blog# npm -v\n9.2.0\nroot@hexo:/hexo/blog# hexo -v\nINFO  Validating config\nhexo: 7.2.0\nhexo-cli: 4.3.2\nos: linux 6.6.26-linuxkit Ubuntu 24.04 LTS 24.04 LTS (Noble Numbat)\nnode: 18.19.1\nacorn: 8.8.1\nada: 2.7.2\nares: 1.27.0\nbase64: 0.5.0\nbrotli: 1.1.0\ncjs_module_lexer: 1.2.3\ncldr: 44.1\nicu: 74.2\nllhttp: 6.1.0\nmodules: 109\nnapi: 9\nnghttp2: 1.59.0\nopenssl: 3.0.13\nsimdutf: 3.2.18\ntz: 2023c\nunicode: 15.1\nuv: 1.48.0\nuvwasi: 0.0.19\nv8: 10.2.154.26-node.28\nzlib: 1.3\n```\n\n### 打开/关闭hexo\n\n```shell\n#打开hexo\ndocker start hexo\ndocker exec -it hexo /bin/bash\n```\n\n```shell\n#关闭hexo\nroot@hexo:/hexo/blog# exit\ndocker stop hexo\n```\n\n"},{"title":"Hexo连接Git","url":"/2f35f85b.html","content":"\n## 创建GitHub账号\n\n这个就不用多说了，直接进入正题\n\n## 本地连接GitHub\n\n### 配置用户名和邮箱\n\n在创建hexo项目的文件夹内`shift+右键`打开`LinuxShell`\n\n```shell\ngit config --global user.name \"你的GitHub用户名\"\ngit config --global user.email \"你的GitHub邮箱\"\n```\n\n### 创建SSH密钥\n\n```shell\nssh-keygen -t rsa -C \"你的GitHub邮箱\"\n#然后一直回车\n```\n\n在`C:\\User\\[用户名]\\.ssh`目录下，用记事本打开`id_rsa.pub`并复制\n\n### 在GitHub中添加SSH密钥\n\n在GitHub中进入`Settings`\n\n选择左边的`SSH and GPG keys`，点击`New SSH key`\n\n取好名称将复制的内容粘贴进`Key`中，点击`Add SSH key`\n\n### 验证本地连接\n\n在本地的Linuxshell中输入\n\n```shell\nssh -T git@github.com\n#后面步骤输入'yes'回车\n```\n\n## 上传hexo程序到GitHub\n\n先在Hexo中安装hexo-deployer-git:\n\n```shell\nnpm install hexo-deployer-git --save\n```\n\n然后修改hexo文件夹内的_config.yml文件\n\n```yaml\ndeploy:\n  type: git\n  repo: git@github.com:[github用户名]/[github用户名].github.io.git\n  branch: gh-pages\n```\n\n```shell\nhexo clean\nhexo g d\n```\n\n然后我们需要在库设置（Repository Settings）中将默认分支设置为`_config.yml` 配置中的分支名称。\n\n然后在 pages 页面调整源分支\n\n使用`[github用户名].github.io`就能看到自己的网页啦~\n"}]